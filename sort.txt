 Bubble
#include<stdio.h> 
 
void bubble_sort(int [ ],int); 
int main() 
{ 
int n,a[10],i; 
 
printf("\n Enter size of the array"); 
scanf("%d",&n); 
printf("\n Enter elements of the array"); 
for(i=0;i<n;i++) 
scanf("%d",&a[i]); 
bubble_sort(a,n); 
printf("\n After sorting the elements of the array are"); 
for(i=0;i<n;i++) 
printf("%d \t",a[i]); 
 
}
 
void bubble_sort(int a[ ],int n) 
{ 
int i,j,temp; 
for(i=0;i<n-1;i++) 
{ 
for(j=0;j<n-1-i;j++) 
{ 
if(a[j]>a[j+1]) 
{ 
temp=a[j]; 
a[j]=a[j+1]; 
a[j+1]=temp; 
} 
} 
} 
} 

 //C Program to implement selection sort :
 #include <stdio.h>
void selection(int arr[] , int n)
{
  int i , j,small;
  for(i=0 ; i < n-1 ;i++)
    {
      small = i;
      for(j = i+1 ; j < n; j++)
        {
          if(arr[j] < arr[small])
          {
            small = j;
          }
            int temp = arr[small];
            arr[small] = arr[i];
            arr[i] = temp;
          
        }
    }
}
 
void printArr(int a[], int n)  
{
  int i;
  for (i = 0; i < n; i++)
      printf("%d ", a[i]);
}
int main()
{
int a[99] ,i;
int n ;
  printf("Enter how many ele: ");
  scanf("%d",&n);
  for(i=0 ; i<n ; i++)
    {
      printf("Enter the %d ele: ", i+1);
      scanf("%d",&a[i]);
    }
printf("Before sorting array elements are - \n");
printArr(a, n);
selection(a, n);
printf("\nAfter sorting array elements are - \n");
printArr(a, n);
  return 0;
  }
 //C Program to implement  insertion sort :
 #include<stdio.h>
void insertionsort();
int main()
{
int i, n;
int a[50];

printf("Enter the no.of elements in the array : ");
scanf("%d",&n);
printf("Enter the array elements : ");
for(i=0;i<n;i++)
scanf("%d",&a[i]);
printf("Unsorted array : ");
for(i=0;i<n;i++)
printf("%d ",a[i]);
insertionsort(a,n);
printf("\nSorted array : ");
for(i=0;i<n;i++)
printf("%d ",a[i]);
}

void insertionsort(int a[], int n)
{
int i, j, key;

for(i=1;i<n;i++)
{
key = a[i];
j = i-1;
while(j>=0 && key<a[j])
{
a[j+1] = a[j];
j--;
}
a[j+1] = key;
}
}
 //C Program to implement  merge sort :


#include<stdio.h>
void mergesort();
void merge();
int main()
{
int i, n, low, high;
int a[50];

printf("Enter the no.of elements in the array : ");
scanf("%d",&n);
printf("Enter the array elements : ");
for(i=0;i<n;i++)
{
scanf("%d",&a[i]);
}
printf("Unsorted array : ");
for(i=0;i<n;i++)
{
printf("%d ",a[i]);
}
low =0, high = n-1;
mergesort(a,low,high);
printf("\nSorted array : ");
for(i=0;i<n;i++)
{
printf("%d ",a[i]);
}
}

void mergesort(int a[], int low, int high)
{
int mid;
if(low<high)
{
mid = (low+high)/2;
mergesort(a,low,mid);
mergesort(a,mid+1,high);
merge(a,low,mid,high);
}
}

void merge(int a[], int low, int mid, int high)
{
int i, j, k;
int b[50];
i=low, j=mid+1, k=low;
while(i<=mid && j<=high)
{
if(a[i]<=a[j])
{
b[k] = a[i];
i++;
}
else
{
b[k] = a[j];

j++;
}
k++;
}
if(i>mid)
{
while(j<=high)
{
b[k] = a[j];
 j++;
k++;
}
}
else
{
while(i<=mid)
{
b[k] = a[i];
i++;
k++;
}
}
for(i=low;i<high+1;i++)
a[i] = b[i];
}
 //C Program to implement  Quick sort :


#include<stdio.h>
void quicksort();
int partician();
void main()
{
int i, n, low=0, high;
int a[50];

printf("Enter the no.of elements in the array : ");
scanf("%d",&n);
printf("Enter the array elements : ");
for(i=0;i<n;i++)
{
scanf("%d",&a[i]);
}
printf("Unsorted array : ");
for(i=0;i<n;i++)
{
printf("%d ",a[i]);
}
high = n-1;
quicksort(a,low,high);
printf("\nSorted array : ");
for(i=0;i<n;i++)
{
printf("%d ",a[i]);
}
}

void quicksort(int a[], int low, int high)
{
int pos;
if(low<high)
{
pos = partician(a,low,high);
quicksort(a,low,pos-1);
quicksort(a,pos+1,high);
}
}

int partician(int a[], int low, int high)
{
int temp, pivot, start, end;
pivot = a[low];
start = low;
end = high;
while(start<end)
{
while(a[start]<=pivot)
{
start++;
}
while(a[end]>pivot)
{
end--;
						}
if(start<end)
{
temp = a[start];
a[start] = a[end];

a[end] = temp;
}
}
temp = a[end];
a[end] = a[low];
a[low] = temp;
return end;
}

// heap sort
#include <stdio.h>
void swap(int* a, int* b)
{ 
	int temp = *a;

	*a = *b;

	*b = temp;
}

void heapify(int arr[], int N, int i)
{ 
	int largest = i;
 	int left = 2 * i + 1;

	 
	int right = 2 * i + 2;

 	if (left < N && arr[left] > arr[largest])

		largest = left;

	 
	if (right < N && arr[right] > arr[largest])

		largest = right;

	 
	if (largest != i) {

		swap(&arr[i], &arr[largest]);

	 
		heapify(arr, N, largest);
	}
}
  
void heapSort(int arr[], int N)
{

	 
	for (int i = N / 2 - 1; i >= 0; i--)

		heapify(arr, N, i);

	 
	for (int i = N - 1; i >= 0; i--) {

		swap(&arr[0], &arr[i]);

		 
		heapify(arr, i, 0);
	}
}

 
void printArray(int arr[], int N)
{
	for (int i = 0; i < N; i++)
		printf("%d ", arr[i]);
	printf("\n");
}
 // Driver's code
int main()
{
	int arr[99] , i , N;
  printf("how many ele: ");
  scanf("%d",&N);
 for(i=0 ; i<N ; i++)
   {
     printf("Enter the daata: ");
     scanf("%d",&arr[i]);
   }

	 
	heapSort(arr, N);
	printf("Sorted array is");
	printArray(arr, N);
}

 










